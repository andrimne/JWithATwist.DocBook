<?xml version="1.0" encoding="utf-8"?><fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" font-family="serif,Symbol,ZapfDingbats" font-size="10pt" text-align="justify" line-height="normal" font-selection-strategy="character-by-character" line-height-shift-adjustment="disregard-shifts" writing-mode="lr-tb" language="en"><fo:layout-master-set><fo:simple-page-master master-name="blank" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body display-align="center" margin-bottom="0.5in" margin-top="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-blank" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-blank" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-blank" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-blank" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="lot-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="lot-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="lot-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="front-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="front-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="front-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="body-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="body-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="body-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="back-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="back-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="back-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="index-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="index-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master master-name="index-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2" margin-left="0in" margin-right="0in"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" precedence="true" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" precedence="true" display-align="after"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:page-sequence-master master-name="titlepage"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="titlepage-first" page-position="first"/><fo:conditional-page-master-reference master-reference="titlepage-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="titlepage-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="lot"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="lot-first" page-position="first"/><fo:conditional-page-master-reference master-reference="lot-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="lot-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="front"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="front-first" page-position="first"/><fo:conditional-page-master-reference master-reference="front-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="front-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="body"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="body-first" page-position="first"/><fo:conditional-page-master-reference master-reference="body-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="body-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="back"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="back-first" page-position="first"/><fo:conditional-page-master-reference master-reference="back-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="back-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="index"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="index-first" page-position="first"/><fo:conditional-page-master-reference master-reference="index-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="index-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master></fo:layout-master-set><fo:declarations xmlns:fox="http://xmlgraphics.apache.org/fop/extensions"><x:xmpmeta xmlns:x="adobe:ns:meta/"><rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description xmlns:dc="http://purl.org/dc/elements/1.1/" rdf:about=""><dc:title>JWithATwist Reference Manual</dc:title></rdf:Description><rdf:Description xmlns:pdf="http://ns.adobe.com/pdf/1.3/" rdf:about=""/><rdf:Description xmlns:xmp="http://ns.adobe.com/xap/1.0/" rdf:about=""><xmp:CreatorTool>DocBook XSL Stylesheets with Apache FOP</xmp:CreatorTool></rdf:Description></rdf:RDF></x:xmpmeta></fo:declarations><fo:bookmark-tree><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1" starting-state="hide"><fo:bookmark-title>JWithATwist Reference Manual</fo:bookmark-title></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="toc...d0e1"><fo:bookmark-title>Table of Contents</fo:bookmark-title></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e20" starting-state="hide"><fo:bookmark-title>JWithATwist</fo:bookmark-title></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e63" starting-state="hide"><fo:bookmark-title>The JWithATwist Noun</fo:bookmark-title><fo:bookmark internal-destination="d0e113" starting-state="hide"><fo:bookmark-title>Literals</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e143" starting-state="hide"><fo:bookmark-title>The JWithATwist Verbs</fo:bookmark-title><fo:bookmark internal-destination="d0e169" starting-state="hide"><fo:bookmark-title>The Monadic Scalar Operation Helper Program</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e179" starting-state="hide"><fo:bookmark-title>The Dyadic Scalar Operation Helper Program</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e202" starting-state="hide"><fo:bookmark-title>The Monadic Array Operation Helper Program</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e256" starting-state="hide"><fo:bookmark-title>The Dyadic Array Operation Helper Program</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e301" starting-state="hide"><fo:bookmark-title>Monadic Scalar Verbs</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e371" starting-state="hide"><fo:bookmark-title>Dyadic Scalar Verbs</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e485" starting-state="hide"><fo:bookmark-title>Non-Scalar Monadic Verbs</fo:bookmark-title><fo:bookmark internal-destination="d0e537" starting-state="hide"><fo:bookmark-title>The Box Monadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e546" starting-state="hide"><fo:bookmark-title>The DeaultFormat Monadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e563" starting-state="hide"><fo:bookmark-title>The GradeUp Monadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e586" starting-state="hide"><fo:bookmark-title>The Monadic Iota Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e605" starting-state="hide"><fo:bookmark-title>The Open Monadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e620" starting-state="hide"><fo:bookmark-title>The ShapeOf Monadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e631" starting-state="hide"><fo:bookmark-title>The Tally Monadic Verb</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark internal-destination="d0e642" starting-state="hide"><fo:bookmark-title>Non-Scalar Dyadic Verbs</fo:bookmark-title><fo:bookmark internal-destination="d0e706" starting-state="hide"><fo:bookmark-title>The Amend Dyadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e719" starting-state="hide"><fo:bookmark-title>The Drop Dyadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e738" starting-state="hide"><fo:bookmark-title>The From Dyadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e753" starting-state="hide"><fo:bookmark-title>The Dyadic Iota Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e764" starting-state="hide"><fo:bookmark-title>The Replicate Dyadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e783" starting-state="hide"><fo:bookmark-title>The Select Dyadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e800" starting-state="hide"><fo:bookmark-title>The Shape Dyadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e817" starting-state="hide"><fo:bookmark-title>The Take Dyadic Verb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e841" starting-state="hide"><fo:bookmark-title>The Transpose Dyadic Verb</fo:bookmark-title></fo:bookmark></fo:bookmark></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e856" starting-state="hide"><fo:bookmark-title>The JWithATwist Adverbs</fo:bookmark-title><fo:bookmark internal-destination="d0e890" starting-state="hide"><fo:bookmark-title>The Fold Adverb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e905" starting-state="hide"><fo:bookmark-title>The Monadic Rank Adverb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e946" starting-state="hide"><fo:bookmark-title>The Dyadic Rank Adverb</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e989" starting-state="hide"><fo:bookmark-title>The Scan Adverb</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1004" starting-state="hide"><fo:bookmark-title>The JWithATwist Conjunctions</fo:bookmark-title></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1009" starting-state="hide"><fo:bookmark-title>The JWithATwist Syntax</fo:bookmark-title></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1194" starting-state="hide"><fo:bookmark-title>JWithATwist Use Cases</fo:bookmark-title><fo:bookmark internal-destination="d0e1203" starting-state="hide"><fo:bookmark-title>The JWithATwist Terminal</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e1214" starting-state="hide"><fo:bookmark-title>Using JWithATwist From F#</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e1241" starting-state="hide"><fo:bookmark-title>Extending JWithATwist</fo:bookmark-title></fo:bookmark><fo:bookmark internal-destination="d0e1248" starting-state="hide"><fo:bookmark-title>Using the JWithATwist Mock Interpreter to Create Your Own Language</fo:bookmark-title></fo:bookmark></fo:bookmark><fo:bookmark xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1253" starting-state="hide"><fo:bookmark-title>Glossary</fo:bookmark-title></fo:bookmark></fo:bookmark-tree><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e20"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e63"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e113"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e143"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e169"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e179"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e202"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e256"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e301"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e371"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e485"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e537"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e546"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e563"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e586"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e605"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e620"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e631"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e642"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e706"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e719"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e738"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e753"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e764"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e783"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e800"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e817"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e841"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e856"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e890"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e905"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e946"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e989"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1004"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1009"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1194"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1203"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1214"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1241"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1248"/><fox:destination xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" internal-destination="d0e1253"/><fo:page-sequence xmlns:axf="http://www.antennahouse.com/names/XSL/Extensions" hyphenate="true" master-reference="body" language="en" format="1" initial-page-number="1" force-page-count="no-force" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2"><fo:static-content flow-name="xsl-region-before-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block>JWithATwist Reference Manual</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block>JWithATwist Reference Manual</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader color="black" leader-pattern="rule" leader-length="1in"/></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-inner-first"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-inner-odd"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-inner-even"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-inner-blank"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-outer-first"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-outer-odd"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-outer-even"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-outer-blank"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-after-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body" start-indent="4pc" end-indent="0pt"><fo:block id="d0e1"><fo:block font-family="sans-serif,Symbol,ZapfDingbats"><fo:block start-indent="0pt" text-align="center"><fo:block keep-with-next.within-column="always" font-size="24.8832pt" font-weight="bold"><fo:block keep-with-next.within-column="always" space-before.optimum="10pt" space-before.minimum="10pt * 0.8" space-before.maximum="10pt * 1.2" hyphenate="false" text-align="center" start-indent="0pt" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2">JWithATwist Reference Manual</fo:block></fo:block><fo:block space-before="0.5em">Copyright <fo:inline font-family="serif,Symbol,ZapfDingbats">©</fo:inline> 2016 CC: By Erling Hellenäs</fo:block><fo:block text-align="start" margin-left="0.5in" margin-right="0.5in" font-family="serif,Symbol,ZapfDingbats"><fo:block id="d0e5"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
                <fo:external-graphic src="url(resources/CC88x31BY.png)" width="auto" height="auto" content-width="auto" content-height="auto"/>
                This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <fo:basic-link external-destination="url(http://creativecommons.org/licenses/by/4.0/)"><fo:inline>http://creativecommons.org/licenses/by/4.0/</fo:inline></fo:basic-link>.
            </fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" id="toc...d0e1"><fo:block><fo:block><fo:block space-before.minimum="1em" space-before.optimum="1.5em" space-before.maximum="2em" space-after="0.5em" start-indent="0pt" font-size="17.28pt" font-weight="bold" font-family="sans-serif,Symbol,ZapfDingbats">Table of Contents</fo:block></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e20">JWithATwist</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e20"><fo:page-number-citation ref-id="d0e20"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e63">The JWithATwist Noun</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e63"><fo:page-number-citation ref-id="d0e63"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.d0e1.d0e63" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e113">Literals</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e113"><fo:page-number-citation ref-id="d0e113"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e143">The JWithATwist Verbs</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e143"><fo:page-number-citation ref-id="d0e143"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.d0e1.d0e143" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e169">The Monadic Scalar Operation Helper Program</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e169"><fo:page-number-citation ref-id="d0e169"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e179">The Dyadic Scalar Operation Helper Program</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e179"><fo:page-number-citation ref-id="d0e179"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e202">The Monadic Array Operation Helper Program</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e202"><fo:page-number-citation ref-id="d0e202"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e256">The Dyadic Array Operation Helper Program</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e256"><fo:page-number-citation ref-id="d0e256"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e301">Monadic Scalar Verbs</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e301"><fo:page-number-citation ref-id="d0e301"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e371">Dyadic Scalar Verbs</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e371"><fo:page-number-citation ref-id="d0e371"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e485">Non-Scalar Monadic Verbs</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e485"><fo:page-number-citation ref-id="d0e485"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e642">Non-Scalar Dyadic Verbs</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e642"><fo:page-number-citation ref-id="d0e642"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e856">The JWithATwist Adverbs</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e856"><fo:page-number-citation ref-id="d0e856"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.d0e1.d0e856" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e890">The Fold Adverb</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e890"><fo:page-number-citation ref-id="d0e890"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e905">The Monadic Rank Adverb</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e905"><fo:page-number-citation ref-id="d0e905"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e946">The Dyadic Rank Adverb</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e946"><fo:page-number-citation ref-id="d0e946"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e989">The Scan Adverb</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e989"><fo:page-number-citation ref-id="d0e989"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e1004">The JWithATwist Conjunctions</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e1004"><fo:page-number-citation ref-id="d0e1004"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e1009">The JWithATwist Syntax</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e1009"><fo:page-number-citation ref-id="d0e1009"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e1194">JWithATwist Use Cases</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e1194"><fo:page-number-citation ref-id="d0e1194"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.d0e1.d0e1194" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e1203">The JWithATwist Terminal</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e1203"><fo:page-number-citation ref-id="d0e1203"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e1214">Using JWithATwist From F#</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e1214"><fo:page-number-citation ref-id="d0e1214"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e1241">Extending JWithATwist</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e1241"><fo:page-number-citation ref-id="d0e1241"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e1248">Using the JWithATwist Mock Interpreter to Create Your Own Language</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e1248"><fo:page-number-citation ref-id="d0e1248"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="d0e1253">Glossary</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="d0e1253"><fo:page-number-citation ref-id="d0e1253"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block id="d0e20"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">JWithATwist</fo:marker><fo:block font-size="20.735999999999997pt">JWithATwist</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">JWithATwist is a programming language under development. It has many similarities with J. You can find descriptions of J at <fo:basic-link external-destination="url(www.jsoftware.com)"><fo:inline>www.jsoftware.com</fo:inline></fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">I use a J-like syntax to describe this language. The terms can have slightly different definitions because of language differences.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The most important language concepts are:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e32"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e33"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block><fo:inline font-style="italic">Noun</fo:inline> - an n-dimensional array of values where the values are simple data types or other n-dimensional arrays.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e38"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block><fo:inline font-style="italic">Verb</fo:inline> - a function with one or two noun arguments returning a noun.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e43"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block><fo:inline font-style="italic">Adverb</fo:inline> - a function with a verb argument and one or two noun arguments, returning a noun.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e48"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block><fo:inline font-style="italic">Conjunction</fo:inline> - an operator with two verb arguments and one or two noun arguments, returning a noun.</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A <fo:inline font-style="italic">monadic</fo:inline> verb has one argument, a <fo:inline font-style="italic">dyadic</fo:inline> verb has two. Adverbs and conjunctions are also called monadic or dyadic after their number of noun arguments.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Nouns, verbs, adverbs and conjunctions all have their own sections in this manual. A section describes the language syntax. The last section describes the use cases.</fo:block></fo:block><fo:block id="d0e63"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The JWithATwist Noun</fo:marker><fo:block font-size="20.735999999999997pt">The JWithATwist Noun</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The noun is n-dimensional array. It has one of these data types: </fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e68"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e69"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Integer</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e72"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Float</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e75"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Boolean</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e78"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Unicode</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e81"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Boxed</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Integer, Float, Boolean and Unicode corresponds to the .NET data types of Int64, Double, Bool and Char, Unicode-16.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A noun of data type <fo:inline font-style="italic">boxed</fo:inline> contains other n-dimensional arrays, which can also be boxed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-style="italic">rank</fo:inline> of a noun is the number of dimensions of the array it contains.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The nouns are immutable. The value is defined when it is created. It can not be changed. Modification operations return a new noun. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"> A noun with zero dimensions, a singleton, is called a <fo:inline font-style="italic">scalar</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The noun is seen as a structure of something called <fo:inline font-style="italic">k-cells</fo:inline>. The scalar is a 0-cell, the vector a 1-cell, the table a 2-cell and so on for higher dimensions. An n-cell contains a number of (n-1)-cells which contains a number of (n-2)-cells.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A 0-cell can also be called a <fo:inline font-style="italic">cell</fo:inline>.</fo:block><fo:block id="d0e113"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Literals</fo:marker><fo:block font-size="17.28pt">Literals</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Simple data types are entered in the following ways:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e118"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e119"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Integer: <fo:inline font-family="monospace">0 -1 2 3</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e124"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Float: <fo:inline font-family="monospace">0.0 -1.0e4 nan infinity -infinity</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e129"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Boolean: <fo:inline font-family="monospace">true false</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e134"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Unicode: <fo:inline font-family="monospace">"John" "George"</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you enter only one value the result is a scalar, a 0-cell. If you enter more than one value the result is a vector. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When you enter unicode values the result is a boxed noun of unicode nouns. A boxed array of unicode arrays. </fo:block></fo:block></fo:block><fo:block id="d0e143"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The JWithATwist Verbs</fo:marker><fo:block font-size="20.735999999999997pt">The JWithATwist Verbs</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The JWithATwist verbs are normally array operations. The arguments are one or two arrays, the result another array. You write <fo:inline font-family="monospace">1 5 + 2 3</fo:inline> and get the result <fo:inline font-family="monospace">3 8</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We talk about the <fo:inline font-style="italic">rank</fo:inline> of a verb. The rank is the k-cell or k-cells of the argument or arguments that the actual underlying operation is performed on. A scalar operation is done on one or two 0-cell arguments. We say that a monadic scalar verb has rank 0 because the underlying operation is performed on one 0-cell argument. We say that a dyadic scalar verb has rank 0 0 because the underlying operation is done between two 0-cell arguments. The arguments of the verb are arrays, but the underlying operation has a 0-cell argument or two 0-cell arguments.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To show that a verb operates on the whole of an argument, we denote the rank with _ . A monadic verb operating on the whole of its argument has rank _ . A dyadic verb operating on the whole of its both arguments has rank _ _. JWithATwist does not allow you to write this in the program, but you can use the actual rank of the argument or any higher number.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Most verbs are scalar, which means that the underlying operation is done between corresponding cells of the argument arrays. The result of the underlying operation is another cell. The array part of the operation is handled in the same way for all of these verbs. The verbs use a helper program to handle the loop over the parts of the arguments the verb does not handle.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Other verbs have other ranks. The underlying operation can be performed on part or whole of the array arguments. If the underlying operation is not done on the whole of the arguments, the verbs use a helper program to handle the loop over the parts of the arguments the verb itself does not handle.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are four such helper programs, one for monadic and one for dyadic scalar operations, one for monadic and one for dyadic array operations. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To understand JWithATwist it is important to understand these helper programs.</fo:block><fo:block id="d0e169"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The Monadic Scalar Operation Helper Program</fo:marker><fo:block font-size="17.28pt">The Monadic Scalar Operation Helper Program</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The monadic scalar operation helper program performs the underlying operation on each cell of the argument. The result is an array of the same size. This operation is usually called <fo:inline font-style="italic">map</fo:inline> in functional languages.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The monadic scalar operation helper program also handles type conversions from integer to float. If a float operation is performed on an integer it is automatically converted to a float before the operation. </fo:block></fo:block><fo:block id="d0e179"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The Dyadic Scalar Operation Helper Program</fo:marker><fo:block font-size="17.28pt">The Dyadic Scalar Operation Helper Program</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The basic function of the dyadic scalar operation helper program is to perform the underlying operation between the corresponding cells of the argument arrays. The result is an array of the same size. This operation is usually called <fo:inline font-style="italic">map2</fo:inline> in functional languages. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If one of the arguments is a scalar, the operation is performed between this scalar and each of the cells of the other argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the arguments have different shape, but the shape of one of the arguments is the same as the shape of the first part of the other argument, a loop is created over the remaining part of the larger argument. We talk about <fo:inline font-style="italic">agreement</fo:inline>. Agreement is how JWithATwist handles operations between arguments of different shape and rank. Which combinations are allowed and which combinations are not.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e194">Example:
<fo:inline font-family="monospace">
    10 20 + |i. 2 3
10 11 12
20 21 22
</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The shape of the left argument in the example is 2, the same as the first part of the shape 2 3 of the right argument. The helper program creates a loop over the remaining part, the cells in the rows, and the corresponding part of the left argument is added to each of these cells.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The dyadic scalar operation helper program also handles type conversions from integer to float. If a float operation is performed on an integer it is automatically converted to a float before the operation. </fo:block></fo:block><fo:block id="d0e202"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The Monadic Array Operation Helper Program</fo:marker><fo:block font-size="17.28pt">The Monadic Array Operation Helper Program</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The monadic array operation helper program is available to the user as the monadic rank adverb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If a monadic verb is not scalar, if the underlying operation does not handle the whole of it's array argument and if the argument is correct, it calls the monadic array operation helper program to loop over the parts of the argument it does not handle.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As an example, the monadic Iota verb is an index generator. It generates an n-dimensional array of indexes when given a vector argument. <fo:inline font-family="monospace">|i. 3</fo:inline> gives a result of <fo:inline font-family="monospace">0 1 2</fo:inline>. <fo:inline font-family="monospace">|i. 2 3</fo:inline> gives a shape 2 3 array with rows <fo:inline font-family="monospace">0 1 2</fo:inline> and <fo:inline font-family="monospace">3 4 5</fo:inline> as result.  If given an argument of rank higher than 1, it calls the monadic array operation helper program to handle the loop over the rank 1 parts it handles.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Iota verb is then called a number of times by the monadic array operation helper program, which the Iota verb itself called as a helper program. Each time the Iota verb is called with a vector argument. The result is a number of n-dimensional arrays with different shape but with the same rank, since the 1-cells of the argument all have the same length. The monadic array operation helper program calculates the maximum shape of the result in each dimension. It pads all the results so that they all have this same maximum shape. The shape of the result is the shape of the part of the argument shape the Iota verb does not handle catenated with the maximum shape of the Iota verb results. </fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e228">Example:
<fo:inline font-family="monospace">
    2 2 $ 2 1 1 3
2 1
1 3
    |i. 2 2 $ 2 1 1 3
Type: Integer, Shape: 2 2 3 , Values: 0 0 0 1 0 0 0 1 2 0 0 0 ...
    |$ |i. 2 2 $ 2 1 1 3
2 2 3
    |i. 2 1
0
1
    |i. 1 3
0 1 2
</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Iota verb handles each row of the argument and calls the monadic array operation helper program to loop over the two rows. Like this: <fo:inline font-family="monospace">    |i. '/ 1 / 2 2 $ 2 1 1 3</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The results from each call to the Iota verb from the monadic array operation helper program is the column <fo:inline font-family="monospace">0 1</fo:inline> and the row <fo:inline font-family="monospace">0 1 2</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These results are padded to the shape 2 3. The final result has the shape of <fo:inline font-family="monospace">2 2 3</fo:inline>, the part of the argument shape not handled by the Iota verb, <fo:inline font-family="monospace">2</fo:inline>, catenated with <fo:inline font-family="monospace">2 3</fo:inline>, the maximum shape of the Iota verb results. </fo:block></fo:block><fo:block id="d0e256"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The Dyadic Array Operation Helper Program</fo:marker><fo:block font-size="17.28pt">The Dyadic Array Operation Helper Program</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The dyadic array operation helper program is available to the user as the dyadic rank adverb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If a dyadic verb is not scalar, if the underlying operation does not handle the whole of both of it's array arguments and if the arguments are correct, it calls the dyadic array operation helper program to loop over the parts of the argument it does not handle.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As an example, the Shape verb shapes the whole of the right argument to the shape described by it's vector left argument. <fo:inline font-family="monospace">2 2 2 $ 0 1 2 3 4 5 6 7</fo:inline> creates a three-dimensional array with the shape <fo:inline font-family="monospace">2 2 2</fo:inline>. If given a left argument of rank higher than 1, the Shape verb calls the the dyadic array operation helper program to handle the loop over the rank 1 parts of the left argument it handles.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Shape verb is then called a number of times by the dyadic array operation helper program, which the Shape verb itself called as a helper program. Each time the Shape verb is called with a vector left argument. The result is a number of n-dimensional arrays with different shape but with the same rank, since the 1-cells of the left argument all have the same length. The dyadic array operation helper program calculates the maximum shape of the result in each dimension. It pads all the results so that they all have this same maximum shape. The shape of the result is the shape of the part of the left argument shape the Shape verb does not handle catenated with the maximum shape of the Shape verb results. </fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e273">Example:
<fo:inline font-family="monospace">
    2 2 $ 2 1 1 3
2 1
1 3
    ( 2 2 $ 2 1 1 3 ) $ |i. 3
Type: Integer, Shape: 2 2 3 , Values: 0 0 0 1 0 0 0 1 2 0 0 0 ...
    |$ ( 2 2 $ 2 1 1 3 )
2 2 3
    ( 2 1 ) $ |i. 3
0
1
    ( 1 3 ) $ |i. 3
0 1 2
</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Shape verb handles each row of the left argument and calls the dyadic array operation helper program to loop over the two rows. Like this: <fo:inline font-family="monospace">( 2 2 $ 2 1 1 3 ) $ '/ 1 2 / |i. 3 </fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The results from each call to the Shape verb from the dyadic array operation helper program is the column <fo:inline font-family="monospace">0 1</fo:inline> and the row <fo:inline font-family="monospace">0 1 2</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These results are padded to the shape 2 3. The final result has the shape of <fo:inline font-family="monospace">2 2 3</fo:inline>, the part of the argument shape not handled by the Shape verb, <fo:inline font-family="monospace">2</fo:inline>, catenated with <fo:inline font-family="monospace">2 3</fo:inline>, the maximum shape of the Shape verb results. </fo:block></fo:block><fo:block id="d0e301"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Monadic Scalar Verbs</fo:marker><fo:block font-size="17.28pt">Monadic Scalar Verbs</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The monadic scalar verbs are described in table XX, YY, ..</fo:block><fo:block xmlns:rx="http://www.renderx.com/XSL/Extensions" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="auto" id="d0e306"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Table 1. Arithmetic Monadic Scalar Verbs</fo:block><fo:table border-before-width.conditionality="retain" border-collapse="collapse" border-start-style="solid" border-end-style="solid" border-top-style="solid" border-bottom-style="solid" border-start-width="0.5pt" border-end-width="0.5pt" border-top-width="0.5pt" border-bottom-width="0.5pt" border-start-color="black" border-end-color="black" border-top-color="black" border-bottom-color="black" table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="50%"/><fo:table-column column-number="2" column-width="50%"/><fo:table-body start-indent="0pt" end-indent="0pt"><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|*</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Signum</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|%</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Reciprocal</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|&lt;.</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Floor</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|&gt;.</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Ceiling</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|-</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Negate</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">||</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt"><fo:block>Magnitude</fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Floor and Ceiling are float operations. In JWithATwist the result in an integer. The largest integer a float can correctly represent is 2 raised to the power of 51. The smallest integer a float can correctly represent is the negation of this. In JWithATwist, if Floor and Ceiling is used on a float with larger absolute value the result is domain error.</fo:block><fo:block xmlns:rx="http://www.renderx.com/XSL/Extensions" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="auto" id="d0e349"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Table 2. Boolean Monadic Scalar Verbs</fo:block><fo:table border-before-width.conditionality="retain" border-collapse="collapse" border-start-style="solid" border-end-style="solid" border-top-style="solid" border-bottom-style="solid" border-start-width="0.5pt" border-end-width="0.5pt" border-top-width="0.5pt" border-bottom-width="0.5pt" border-start-color="black" border-end-color="black" border-top-color="black" border-bottom-color="black" table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="50%"/><fo:table-column column-number="2" column-width="50%"/><fo:table-body start-indent="0pt" end-indent="0pt"><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|-.</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt"><fo:block>Not</fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block><fo:block xmlns:rx="http://www.renderx.com/XSL/Extensions" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="auto" id="d0e360"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Table 3. Conversion Monadic Scalar Verbs</fo:block><fo:table border-before-width.conditionality="retain" border-collapse="collapse" border-start-style="solid" border-end-style="solid" border-top-style="solid" border-bottom-style="solid" border-start-width="0.5pt" border-end-width="0.5pt" border-top-width="0.5pt" border-bottom-width="0.5pt" border-start-color="black" border-end-color="black" border-top-color="black" border-bottom-color="black" table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="50%"/><fo:table-column column-number="2" column-width="50%"/><fo:table-body start-indent="0pt" end-indent="0pt"><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|_</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt"><fo:block>Boolean to integer</fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:block><fo:block id="d0e371"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Dyadic Scalar Verbs</fo:marker><fo:block font-size="17.28pt">Dyadic Scalar Verbs</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The dyadic scalar verbs are described in table XX, YY, ..</fo:block><fo:block xmlns:rx="http://www.renderx.com/XSL/Extensions" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="auto" id="d0e376"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Table 4. Arithmetic Dyadic Scalar Verbs</fo:block><fo:table border-before-width.conditionality="retain" border-collapse="collapse" border-start-style="solid" border-end-style="solid" border-top-style="solid" border-bottom-style="solid" border-start-width="0.5pt" border-end-width="0.5pt" border-top-width="0.5pt" border-bottom-width="0.5pt" border-start-color="black" border-end-color="black" border-top-color="black" border-bottom-color="black" table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="50%"/><fo:table-column column-number="2" column-width="50%"/><fo:table-body start-indent="0pt" end-indent="0pt"><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">+</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Add</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">-</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Subtract</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">*</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Times</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">%</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Divide</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">&lt;.</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Min</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">&gt;.</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Max</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">^</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt"><fo:block>Power</fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In JWithATwist Power always returns a float.</fo:block><fo:block xmlns:rx="http://www.renderx.com/XSL/Extensions" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="auto" id="d0e425"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Table 5. Comparison Dyadic Scalar Verbs</fo:block><fo:table border-before-width.conditionality="retain" border-collapse="collapse" border-start-style="solid" border-end-style="solid" border-top-style="solid" border-bottom-style="solid" border-start-width="0.5pt" border-end-width="0.5pt" border-top-width="0.5pt" border-bottom-width="0.5pt" border-start-color="black" border-end-color="black" border-top-color="black" border-bottom-color="black" table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="50%"/><fo:table-column column-number="2" column-width="50%"/><fo:table-body start-indent="0pt" end-indent="0pt"><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">&lt;</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Less than</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">&lt;:</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Less than or equal</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">&gt;</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Greater than</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">&gt;:</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Greater than or equal</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">=</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Equal</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">~:</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt"><fo:block>Not equal</fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">JWithATwist does not use comparison tolerance. The use of equality operations on floats is not recommended.</fo:block><fo:block xmlns:rx="http://www.renderx.com/XSL/Extensions" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="auto" id="d0e468"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Table 6. Boolean Dyadic Scalar Verbs</fo:block><fo:table border-before-width.conditionality="retain" border-collapse="collapse" border-start-style="solid" border-end-style="solid" border-top-style="solid" border-bottom-style="solid" border-start-width="0.5pt" border-end-width="0.5pt" border-top-width="0.5pt" border-bottom-width="0.5pt" border-start-color="black" border-end-color="black" border-top-color="black" border-bottom-color="black" table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="50%"/><fo:table-column column-number="2" column-width="50%"/><fo:table-body start-indent="0pt" end-indent="0pt"><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">*.</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>And</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">+.</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt"><fo:block>Or</fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:block><fo:block id="d0e485"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Non-Scalar Monadic Verbs</fo:marker><fo:block font-size="17.28pt">Non-Scalar Monadic Verbs</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The non-scalar monadic verbs are shown in table XXX</fo:block><fo:block xmlns:rx="http://www.renderx.com/XSL/Extensions" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="auto" id="d0e490"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Table 7. Non-Scalar Monadic Verbs</fo:block><fo:table border-before-width.conditionality="retain" border-collapse="collapse" border-start-style="solid" border-end-style="solid" border-top-style="solid" border-bottom-style="solid" border-start-width="0.5pt" border-end-width="0.5pt" border-top-width="0.5pt" border-bottom-width="0.5pt" border-start-color="black" border-end-color="black" border-top-color="black" border-bottom-color="black" table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="50%"/><fo:table-column column-number="2" column-width="50%"/><fo:table-body start-indent="0pt" end-indent="0pt"><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|&lt;</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Box</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|':</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>DefaultFormat</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|/:</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>GradeUp</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|i.</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Monadic Iota</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|&gt;</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Open</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|$</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>ShapeOf</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|#</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt"><fo:block>Tally</fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block><fo:block id="d0e537"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Box Monadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Box monadic verb is a verb of rank _ . It is applied to the whole of the right argument. There is no underlying verb. The Box verb creates a boxed scalar noun containing its right argument. The box verb can be used together with the monadic Rank adverb to box k-cells of the argument. It can be used in verb definition arguments to adverbs and conjunctions to box the results. If the verb definition argument to an adverb creates results of different shapes, you might have to box the results. You normally have to open boxed nouns with Open before you can operate on them. After doing your operation you can box the results. </fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e542">Examples:
<fo:inline font-family="monospace">
    |&lt; 1 2 3
 1 2 3
	|$ |&lt; 1 2 3

    |&lt; '/ 0 / 1 2 3
 1 2 3    
    |$ |&lt; '/ 0 / 1 2 3
 3
    "" {! |&lt; ( |&gt; [ ) , |&gt; ] } / "John " "Lennon"
John Lennon
    |$ |&gt; "" {! |&lt; ( |&gt; [ ) , |&gt; ] } / "John " "Lennon"
 11
    "John " "Lennon"
John Lennon
	|$ "John " "Lennon"
 2
</fo:inline></fo:block></fo:block><fo:block id="d0e546"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The DeaultFormat Monadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The DefaultFormat monadic verb is a verb of rank _ . It is applied to the whole of the right argument. There is no underlying verb. The DefaultFormat verb is also used to format the output in the JWithATwist terminal.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">DefaultFormat formats data of rank less than 2 in a simple way. If given data of higher rank the output shows data type, shape and up to 20 values of the output. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Numeric and boolean data is first converted to boxed arrays. Each cell is formatted to a Unicode array and is then boxed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">DefaultFormat recursively formats data in boxed arrays. All data is top right adjusted in the area corresponding to the box.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The size of the boxes in the output is determined by the maximum number of rows of content in the boxes on the same row of boxes and the maximum number of cell columns of content in the boxes in the same column of boxes.  </fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e559">Examples:
<fo:inline font-family="monospace">
    |': 1 2 3
 1 2 3
    |': -1.2345678e-300 1
 -1.23457e-300 1
    |': true false
 true false
    |': "JWithATwist is cool!"
JWithATwist is cool!
    |': ( "Column 1" " Column 2" ) , |&lt; |'/ 0 / |i. 2 2 
Column 1 Column 2
       0        1
       2        3 
    |i. 2 2 2
Type: Integer, Shape: 2 2 2 , Values: 0 1 2 3 4 5 6 7 ...
</fo:inline></fo:block></fo:block><fo:block id="d0e563"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The GradeUp Monadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The GradeUp monadic verb is a verb of rank _ . It is applied to the whole of the right argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The result of GradeUp is an index which can be used together with From to sort the right argument in ascending order.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you apply GradeUp to the produced index you get a new index which can be used to sort the right argument back to its original order.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"> This sort back functionality is frequently used in languages like JWithATwist. You sort information, process it in sorted order and sort the results back to the original order.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">GradeUp can be used on 1 and 2-dimensional arrays. It can not be used on arrays of higher rank.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">GradeUp sorts Unicode in a sort order determined by region settings in Windows. Upper and lower case values are considered equal.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">GradeUp can not be used on boxed arrays.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">GradeUp is a stable sort. It does not reorder elements which are equal. </fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e582">Examples:
<fo:inline font-family="monospace">
    |/: 3 1 2
 1 2 0
    1 2 0 &lt;- 3 1 2
 1 2 3
    |/: 1 2 0
 2 0 1
    2 0 1 &lt;- 1 2 3
 3 1 2
</fo:inline></fo:block></fo:block><fo:block id="d0e586"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Monadic Iota Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The monadic Iota verb is a verb of rank 1 . It is applied to a scalar or vector right argument. When applied to a right argument of higher rank, it calls the monadic array operation helper program to loop over the parts of the argument it does not handle.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Monadic Iota is an index generator.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The result of monadic Iota is a sequence of natural numbers starting at 0.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With a scalar right argument the result is a vector of consecutive natural numbers. The length of the vector of natural numbers is the absolute value of the right argument. If the right argument is positive this vector is sorted in ascending order. If the right argument is negative the vector is sorted in descending order.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">With a vector right argument the result is an array of natural numbers. The rank of the resulting array is the same as the length of the vector right argument. The shape of the resulting array is the same as the absolute value of the vector right argument. The resulting array contains all consecutive natural numbers from 0 to one less than the number of cells in the result array. If a cell in the vector right argument is positive the natural numbers along the corresponding dimension are sorted in ascending order. If a cell in the vector right argument is negative the natural numbers along the corresponding dimension are sorted in descending order. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Monadic Iota is used for indexing and sorting. One application is reversal of the sort order of dimensions in an array.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e601">Examples:
<fo:inline font-family="monospace">
    |i. 3 
 0 1 2
    |i. -3
 2 1 0
    |i. 2 2
 0 1
 2 3
    |i. -2 -2
 3 2
 1 0
    2 2 $ 3 4 5 6
 3 4
 5 6
    ( |i. 2 -2 ) &lt;- |, 2 2 $ 3 4 5 6
 4 3
 6 5
</fo:inline></fo:block></fo:block><fo:block id="d0e605"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Open Monadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Open monadic verb is a verb of rank 0. It is applied to the cells of the right argument. If the argument contains more than one cell, the monadic array operation helper program is used as a helper function.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"> The Open verb removes one layer of boxing of its right argument. It there are several layers of boxing, the result is still boxed. If not, the result is a noun of one of the non-boxed data types, the noun content of the boxed right argument. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you open a noun which is not boxed the result is the same noun.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Open can be used in verb definition arguments to adverbs and conjunctions to open boxed arguments. You normally have to open boxed nouns with Open before you can operate on them. After doing your operation you can box the results. </fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e616">Examples:
<fo:inline font-family="monospace">
    |&gt; |&lt; 1 2 3
 1 2 3
    |&gt; ( |&lt; 2 1 $ 0 1 ) , |&lt; 1 3 $ 0 1 2
Type: Integer, Shape: 2 2 3 , Values: 0 0 0 1 0 0 0 1 2 0 0 0 ...
    |&gt; '/ 0 / ( |&lt; 2 1 $ 0 1 ) , |&lt; 1 3 $ 0 1 2
Type: Integer, Shape: 2 2 3 , Values: 0 0 0 1 0 0 0 1 2 0 0 0 ...
    |&gt; |&lt; |&lt; 1 2 3
 1 2 3
    |$ |&gt; |&lt; |&lt; 1 2 3 

    |&gt; 1 2 3
 1 2 3
    |$ |&gt; 1 2 3 
 3    
    "" {! |&lt; ( |&gt; [ ) , |&gt; ] } / "John " "Lennon"
John Lennon
</fo:inline></fo:block></fo:block><fo:block id="d0e620"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The ShapeOf Monadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The ShapeOf monadic verb is a verb of rank _ . It is applied to the whole of the right argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">ShapeOf returns the shape of the right argument.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e627">Examples:
<fo:inline font-family="monospace">
    |i. 2 3
 0 1 2
 3 4 5
    |$ |i. 2 3
 2 3
</fo:inline></fo:block></fo:block><fo:block id="d0e631"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Tally Monadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Tally monadic verb is a verb of rank _ . It is applied to the whole of the right argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Tally returns the size of the right argument in its first dimension.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e638">Examples:
<fo:inline font-family="monospace">
    |i. 2 3
 0 1 2
 3 4 5
    |# |i. 2 3
 2
</fo:inline></fo:block></fo:block></fo:block><fo:block id="d0e642"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Non-Scalar Dyadic Verbs</fo:marker><fo:block font-size="17.28pt">Non-Scalar Dyadic Verbs</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The non-scalar dyadic verbs are shown in table XXX</fo:block><fo:block xmlns:rx="http://www.renderx.com/XSL/Extensions" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="auto" id="d0e647"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Table 8. Non-Scalar Dyadic Verbs</fo:block><fo:table border-before-width.conditionality="retain" border-collapse="collapse" border-start-style="solid" border-end-style="solid" border-top-style="solid" border-bottom-style="solid" border-start-width="0.5pt" border-end-width="0.5pt" border-top-width="0.5pt" border-bottom-width="0.5pt" border-start-color="black" border-end-color="black" border-top-color="black" border-bottom-color="black" table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="50%"/><fo:table-column column-number="2" column-width="50%"/><fo:table-body start-indent="0pt" end-indent="0pt"><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">&gt;-</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Amend</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">&gt;.-</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Drop</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">&lt;-</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>From</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">i.</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Dyadic Iota</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">#</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Replicate</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">/::</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Select</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">$</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Shape</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">&lt;.-</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>Take</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">\::</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt"><fo:block>Transpose</fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block><fo:block id="d0e706"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Amend Dyadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Amend dyadic verb is a verb of rank _ _ . It is applied to the whole of the right and left argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Amend is used to replace k-cells of the right argument. The result is a new noun where the k-cells are replaced. The original noun is not modified.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The left argument is a boxed array with two values. The first box contains indexes along the first dimension of the right argument. The second box contains the k-cells with which the present contents at these indexes should be replaced.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e715">Example:
<fo:inline font-family="monospace">
    ( ( |&lt; 1 2 ) , |&lt; -4 -5 ) &gt;- 0 1 2 3 4
 0 -4 -5 3 4
</fo:inline></fo:block></fo:block><fo:block id="d0e719"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Drop Dyadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Drop dyadic verb is a verb of rank _ _ . It is applied to the whole of the right and left argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Drop is used to remove k-cells of the right argument. The result is a new noun where these k-cells are removed. The original noun is not modified.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the left argument is a positive scalar, it denotes the number of k-cells that should be removed from the head of the right argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the left argument is a negative scalar, it denotes the number of k-cells that should be removed from the tail of the right argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the left argument is a vector of length n, it denotes the number of k-cells that should be removed from the head or tail of the first n dimensions of the right argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the number of k-cells to remove is larger than the array length in the corresponding dimension, all k-cells in this dimension are removed.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e734">Example:
<fo:inline font-family="monospace">
    2 &gt;.- 0 1 2 3
 2 3
    -2 &gt;.- 0 1 2 3
 0 1
    1 1 &gt;.- |i. 2 2 2
 6 7
</fo:inline></fo:block></fo:block><fo:block id="d0e738"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The From Dyadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The From dyadic verb is a verb of rank _ _ . It is applied to the whole of the right and left argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">From is used to select k-cells of the right argument. The result is a new noun with the selected k-cells. The original noun is not modified.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The left argument contains indexes along the first dimension of the right argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">From can be used together with the dyadic Rank operator to select k-cells along other dimensions than the first dimension.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e749">Example:
<fo:inline font-family="monospace">
    1 2 &lt;- 1 2 3 4
 2 3
    1 2 &lt;- '/ 1 1 / |i. 2 4
 1 2
 5 6    
</fo:inline></fo:block></fo:block><fo:block id="d0e753"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Dyadic Iota Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The dyadic Iota verb is a verb of rank _ _ . It is applied to the whole of the right and left argument. If the left argument is not a scalar, vector or table the result is rank error. There is no underlying verb. It does not handle boxed data.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The dyadic Iota verb searches in the k-cells of the left argument for corresponding k-cells in the right argument. If the k-cell of the right argument is found in the k-cells of the left argument the corresponding cell in the result contains the index of the first k-cell in the left argument equal to the right argument k-cell. If the k-cell of the right argument is not found in the k-cells of the left argument the corresponding cell in the result contains the length of the left argument.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e760">Example:
<fo:inline font-family="monospace">
    1 2 3 i. 2
 1
    1 2 3 i. 0
 3
    1 2 3 i. |i. 2 2
 3 0
 1 2
    ( |i. 2 2 ) i. |i. -4 2
 2 2 1 0 
</fo:inline></fo:block></fo:block><fo:block id="d0e764"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Replicate Dyadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Replicate dyadic verb is a verb of rank _ _ . It is applied to the whole of the right and left argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Replicate is used to replicate k-cells of the right argument. The result is a new noun with the replicated k-cells. The original noun is not modified.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The left argument contains an integer vector of the same length as the first dimension of the right argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The result contains the k-cells of the right argument, each replicated the number of times the corresponding left argument integer value shows. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the corresponding integer in the left argument is 0, the corresponding k-cell in the right argument will not be part of the result.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Replicate can be used together with the dyadic Rank operator to replicate k-cells along other dimensions than the first dimension.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e779">Example:
<fo:inline font-family="monospace">
    0 1 2 0 # 1 2 3 4
 2 3 3
    0 1 2 0 # '/ 1 1 / |i. 2 4
 1 2 2
 5 6 6   
</fo:inline></fo:block></fo:block><fo:block id="d0e783"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Select Dyadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Select dyadic verb is a verb of rank _ _ . It is applied to the whole of the right and left argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Select is used to select k-cells of the right argument. The result is a new noun with the selected k-cells. The original noun is not modified.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The left argument contains a boolean vector of the same length as the first dimension of the right argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The result contains the k-cells of the right argument corresponding to true values in the left argument boolean vector. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Select can be used together with the dyadic Rank operator to select k-cells along other dimensions than the first dimension.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e796">Example:
<fo:inline font-family="monospace">
    false true true false /:: 1 2 3 4
 2 3
    false true true false /:: '/ 1 1 / |i. 2 4
 1 2
 5 6    
</fo:inline></fo:block></fo:block><fo:block id="d0e800"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Shape Dyadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Shape dyadic verb is a verb of rank 1 _ . It is applied to the whole of the right and left argument. The dyadic Rank operator is used as a helper program to handle left arguments of rank higher than 1</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Shape dyadic verb reshapes the k-cells of the right argument to the shape defined by the value of the vector left argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The shape of the result is the shape of a k-cell appended to the value of the left argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the right argument does not contain any values there will be an error message.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the right argument contains fewer values than the result to be produced, values are taken like if there were an indefinite sequence of catenated right arguments to take from.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e813">Example:
<fo:inline font-family="monospace">
    2 2 $ |i. 0
Length error
    2 2 $ 1 2 3 4
 1 2
 3 4  
    2 2 $ 1 2
 1 2
 1 2  
    2 2 $ |i. 2 2
Type: Integer, Shape: 2 2 2 , Values: 0 1 2 3 0 1 2 3
</fo:inline></fo:block></fo:block><fo:block id="d0e817"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Take Dyadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Take dyadic verb is a verb of rank _ _ . It is applied to the whole of the right and left argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Take is used to take k-cells of the right argument. The result is a new noun of these k-cells. The original noun is not modified.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the left argument is a positive scalar, it denotes the number of k-cells that should be taken from the head of the right argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the left argument is a negative scalar, it denotes the number of k-cells that should be taken from the tail of the right argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the left argument is a vector of length n, it denotes the number of k-cells that should be taken from the head or tail of the first n dimensions of the right argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the number of values to take is larger than the array length in the corresponding dimension, k-cells with <fo:inline font-style="italic">fill values</fo:inline> are added.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The integer fill value is 0, the float fill value is 0.0, the boolean fill value is false, the unicode fill value is blank and the boxed array fill value is a scalar boxed array containing an empty integer vector.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e837">Example:
<fo:inline font-family="monospace">
    2 &lt;.- 0 1 2 3
 0 1
    -2 &lt;.- 0 1 2 3
 2 3
    1 1 &lt;.- |i. 2 2 2
 0 1
    6 &lt;.- 0 1 2 3
 0 1 2 3 0 0
</fo:inline></fo:block></fo:block><fo:block id="d0e841"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:block font-size="14.399999999999999pt">The Transpose Dyadic Verb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Transpose dyadic verb is a verb of rank _ _ . It is applied to the whole of the right and left argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Transpose is used to transpose the array of the right argument. The result is a new noun with the transposed array. The original noun is not modified.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The left argument is a vector of the same length as the rank of the right argument. The values of the left argument are the same as if they were used to index the shape of the right argument. If the rank of the right argument is three the left argument has to contain 0, 1 and 2.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The result is that the dimensions change order to the order described by the left argument index.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e852">Example:
<fo:inline font-family="monospace">
    |i. 2 3
 0 1 2
 3 4 5
    1 0 \:: |i. 2 3    
 0 3
 1 4
 2 5
</fo:inline></fo:block></fo:block></fo:block></fo:block><fo:block id="d0e856"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The JWithATwist Adverbs</fo:marker><fo:block font-size="20.735999999999997pt">The JWithATwist Adverbs</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The adverbs are shown in the following table:</fo:block><fo:block xmlns:rx="http://www.renderx.com/XSL/Extensions" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="auto" id="d0e861"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Table 9. Adverbs</fo:block><fo:table border-before-width.conditionality="retain" border-collapse="collapse" border-start-style="solid" border-end-style="solid" border-top-style="solid" border-bottom-style="solid" border-start-width="0.5pt" border-end-width="0.5pt" border-top-width="0.5pt" border-bottom-width="0.5pt" border-start-color="black" border-end-color="black" border-top-color="black" border-bottom-color="black" table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="50%"/><fo:table-column column-number="2" column-width="50%"/><fo:table-body start-indent="0pt" end-indent="0pt"><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">/</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>The Fold adverb</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">|'</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>The Monadic Rank adverb</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">'</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:block>The Dyadic Rank adverb</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt" border-end-width="0.5pt" border-end-style="solid" border-end-color="black"><fo:block><fo:inline font-family="monospace">\</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-start="2pt" padding-end="2pt" padding-top="2pt" padding-bottom="2pt"><fo:block>The Scan adverb</fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block><fo:block id="d0e890"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The Fold Adverb</fo:marker><fo:block font-size="17.28pt">The Fold Adverb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Fold adverb with its verb argument forms a verb of rank _ _ . It is applied to the whole of the right and left argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Fold applies the verb argument between an accumulator and successive k-cells of the right argument. The result is the accumulator value after the last verb application. The left value is the initial accumulator value.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The accumulator and all verb application results must have the same shape and type. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the accumulator is boxed, it's contents can have any shape and type. </fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e901">Example:
<fo:inline font-family="monospace">
    0 + / 1 2 3
 6    
</fo:inline></fo:block></fo:block><fo:block id="d0e905"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The Monadic Rank Adverb</fo:marker><fo:block font-size="17.28pt">The Monadic Rank Adverb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The monadic Rank adverb with its verb argument forms a verb of rank _ . It is applied to the whole of the right argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The monadic Rank adverb applies its verb to k-cells of the right argument, parts of the right argument with a certain rank.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The monadic Rank adverb has a rank argument, evaluated during interpretation. The rank argument defines the k-cells of the verb application. If the rank argument is positive, it denotes the k-cell from the end of the shape of the argument. If the rank argument is negative, it denotes the k-cells from the beginning of the shape of the right argument. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If we have an argument of shape 2 3 4 5 a rank of 1 would mean we operate on the shape 5 k-cells, a rank of -1 would mean we operate on the shape 3 4 5 k-cells.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The part of the shape to the left of the part we operate on is called the outer shape.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The verb application will result in a number of nouns, possibly of different shape.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Rank adverb will calculate the maximum length of these resulting nouns in each of their dimensions. The result is called the inner shape.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"> The Rank adverb will reshape each of the produced results to the rank of the inner shape by adding ones to the left.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"> The Rank adverb will then use the Take dyadic verb to create arrays with the shape of the inner shape from each of the produced results. In this process <fo:inline font-style="italic">fill values</fo:inline> are added. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Rank adverb will then put the maximized results in the parts of the result array defined by the outer shape.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The result will have a shape defined by catenating the outer and the inner shape.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e933">Example:
<fo:inline font-family="monospace">
    |&lt; |'/ 0 / 1 2 3
 1 2 3
    |$ |&lt; |'/ 0 / 1 2 3 
 3    	
    |&lt; |'/ 1 / 1 2 3
1 2 3
    |$ |&lt; |'/ 1 / 1 2 3	

    {! |&lt; 1 + ] } |'/ 0 / 1 2 3
 2 3 4
    |i. |'/ 1 / 2 2 $ 2 1 1 3
Type: Integer, Shape: 2 2 3 , Values: 0 0 0 1 0 0 0 1 2 0 0 0 ...
</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If we operate on an empty argument the monadic Rank adverb has special cases to handle. The argument  as a whole can be empty because the shape contains zeroes, but the part of the argument we operate on can be non-empty. If there is nothing to apply the verb to the shape and type of the result can not be determined by normal execution. It is still very important to handle these cases. What JWithATwist does is to create a <fo:inline font-style="italic">fill value</fo:inline> object or fill value objects of the same shape and type as the non-empty part of the argument. The verb is applied to the fill value object. The resulting shape and type is used as the inner shape and the result type. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the application of the verb on the fill value objects cause an error, the program terminates with this error.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the verb application on the fill value objects have results of the correct shape and type, and does not terminate with an error, the designed program using the Rank adverb will work for the special empty argument cases.  </fo:block></fo:block><fo:block id="d0e946"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The Dyadic Rank Adverb</fo:marker><fo:block font-size="17.28pt">The Dyadic Rank Adverb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The dyadic Rank adverb with its verb argument forms a verb of rank _ _ . It is applied to the whole of the right and left argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The dyadic Rank adverb applies its verb to k-cells of the left and right arguments, parts of the left and right arguments with a certain rank.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The dyadic Rank adverb has a rank argument, evaluated during interpretation. The rank argument defines the k-cells of the verb application. If the rank argument is positive, it denotes the k-cell from the end of the shape of the argument. If the rank argument is negative, it denotes the k-cells from the beginning of the shape of the  argument. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If we have an argument of shape 2 3 4 5 a rank of 1 would mean we operate on the shape 5 k-cells, a rank of -1 would mean we operate on the shape 3 4 5 k-cells.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The part of the shape to the left of the part we operate on is called the outer shape.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This outer shape must be the same for the left and right argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The verb application will result in a number of nouns, possibly of different shape.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The rank adverb will calculate the maximum length of these resulting nouns in each of their dimensions. The result is called the inner shape.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"> The Rank adverb will reshape each of the produced results to the rank of the inner shape by adding ones to the left.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"> The Rank adverb will then use the Take dyadic verb to create arrays with the shape of the inner shape from each of the produced results. In this process <fo:inline font-style="italic">fill values</fo:inline> are added. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Rank adverb will then put the maximized results in the parts of the result array defined by the outer shape.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The result will have a shape defined by catenating the outer and the inner shape.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e976">Example:
<fo:inline font-family="monospace">
    1 2 &lt;- '/ 1 1 / |i. 2 4
 1 2
 5 6
    10 20 {! |&lt; [ + ] }  '/ 1 1 / |i. 2 2
 10 21 12 23
    |$ 10 20 {! |&lt; [ + ] }  '/ 1 1 / |i. 2 2
 2    
    ( 2 2 $ 10 20 30 40 ) {! |&lt; [ + ] }  '/ 1 2 / |i. 2 2
 10 11 30 31
 22 23 42 43
    |$ ( 2 2 $ 10 20 30 40 ) {! |&lt; [ + ] }  '/ 1 2 / |i. 2 2	 
 2
     10 20 + |i. 2 2
 10 11
 22 23
</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If we operate on empty arguments the dyadic Rank adverb has special cases to handle. The argument or arguments as a whole can be empty because the shape contains zeroes, but the part of the argument we operate on can be non-empty. If there is nothing to apply the verb to the shape and type of the result can not be determined by normal execution. It is still very important to handle these cases. What JWithATwist does is to create a <fo:inline font-style="italic">fill value</fo:inline> object or fill value objects of the same shape and type as the non-empty parts of the argument or arguments. The verb is applied between one argument and the fill value object or between two fill value objects. The resulting shape and type is used as the inner shape and the result type. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the application of the verb on the fill value objects cause an error, the program terminates with this error.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the verb application on the fill value object or objects have results of the correct shape and type, and does not terminate with an error, the designed program using the Rank adverb will work for the special empty argument cases.  </fo:block></fo:block><fo:block id="d0e989"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The Scan Adverb</fo:marker><fo:block font-size="17.28pt">The Scan Adverb</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Scan adverb with its verb argument forms a verb of rank _ _ . It is applied to the whole of the right and left argument. There is no underlying verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Scan applies the verb argument between an accumulator and successive k-cells of the right argument. The result is an array of all accumulator values after the last verb application. The left value is the initial accumulator value.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The accumulator and all verb application results must have the same shape and type. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the accumulator is boxed, it's contents can have any shape and type. </fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e1000">Example:
<fo:inline font-family="monospace">
    0 + \ 1 2 3
 1 2 6   
</fo:inline></fo:block></fo:block></fo:block><fo:block id="d0e1004"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The JWithATwist Conjunctions</fo:marker><fo:block font-size="20.735999999999997pt">The JWithATwist Conjunctions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For the moment JWithATwist has no conjunctions and this section is empty. Many of the operations of the J conjunctions can be done in other ways in JWithATwist.</fo:block></fo:block><fo:block id="d0e1009"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The JWithATwist Syntax</fo:marker><fo:block font-size="20.735999999999997pt">The JWithATwist Syntax</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These simple or simplified verbs, adverbs and conjunctions are used to make this description easier to understand:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e1014"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1015"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Dyadic verb Addition,<fo:inline font-family="monospace"> +</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1020"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Dyadic verb Subtraction,<fo:inline font-family="monospace"> - </fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1025"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Monadic verb Negation,<fo:inline font-family="monospace"> |- </fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1030"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Monadic adverb,<fo:inline font-family="monospace"> / </fo:inline>. This operator is defined <fo:inline font-family="monospace"> u / y &lt;-&gt; y u y</fo:inline>. It applies the in-fix u verb between two copies of the argument.<fo:inline font-family="monospace"> + / 1 &lt;-&gt; 1 + 1 &lt;-&gt; 2</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1042"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Dyadic adverb,<fo:inline font-family="monospace"> /- </fo:inline>. This operator is defined <fo:inline font-family="monospace">x u/- y &lt;-&gt; x u y</fo:inline>. It applies the infix u verb between the left and right argument.<fo:inline font-family="monospace"> 1 + /- 1 &lt;-&gt; 1 + 1 &lt;-&gt; 2</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1053"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Monadic conjunction,<fo:inline font-family="monospace"> |. </fo:inline>. This operator is defined<fo:inline font-family="monospace"> u |. v y &lt;-&gt; u y v y</fo:inline>. It applies the infix dyadic verb v between copies of the right argument and the monadic verb u to the result.<fo:inline font-family="monospace"> |- |. + 1 &lt;-&gt; |- 1 + 1 &lt;-&gt; -2 </fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1065"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Dyadic conjunction,<fo:inline font-family="monospace"> . </fo:inline>. This operator is defined<fo:inline font-family="monospace"> x u . v y &lt;-&gt; u x v y </fo:inline>. It applies the infix dyadic verb v between the left and right arguments and the monadic verb u to the result.<fo:inline font-family="monospace"> 2 |- . + 5 &lt;-&gt; |- 2 + 5 &lt;-&gt; -7 </fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There is no order of precedence between the operations. Execution is from right to left modified by parenthesis.<fo:inline font-family="monospace"> |- |- |- 1 &lt;-&gt; -1</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The language elements are associated to its arguments like this:</fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d0e1083"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1084"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A monadic verb has one noun argument to the right. Like this: <fo:inline font-family="monospace">|- 1 </fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1090"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A dyadic verb has one noun argument to the left and one to the right. Like this:<fo:inline font-family="monospace"> 1 + 1 </fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1096"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A monadic adverb has a verb argument to the left and a noun argument to the right. Like this:<fo:inline font-family="monospace"> + / 1 </fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1102"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A dyadic adverb has a verb argument to the left, one noun argument to the left and one to the right. Like this:<fo:inline font-family="monospace"> 1 + /- 1 </fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1108"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A monadic conjunction has a verb argument to the left and one to the right, and one noun argument to the right. Like this: <fo:inline font-family="monospace">|- |. + 1 </fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1114"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A dyadic conjunction has a verb argument to the left and one to the right, and one noun argument to the left and one to the right. Like this: <fo:inline font-family="monospace">1 |- . + 1</fo:inline> .</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d0e1120"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>An adverb to the left of a conjunction is together with it's verb the left argument of the conjunction. Like this in the monadic case:<fo:inline font-family="monospace"> + / |. + 1 </fo:inline>. Like this in the dyadic case:<fo:inline font-family="monospace"> 1 + / . + 1 </fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">An adverb together with its left verb forms a new verb. A conjunction together with its right verb and its left verb or adverb forms a new verb.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Monadic verbs, adverbs and conjunctions create verb trains like this:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-family="monospace"> |-     + /     |-     |- |. +     |-     + / |. +     |- 1</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">I use extra blanks to show the separation between verbs.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You always need at least one blank between two syntax elements.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A program is called a <fo:inline font-style="italic">noun definition</fo:inline>. It is written between curly brackets, like this <fo:inline font-family="monospace">{ some code }</fo:inline> . It can contain <fo:inline font-style="italic">verb definitions</fo:inline>, written between curly brackets where the first bracket is immediately followed by <fo:inline font-family="monospace">!</fo:inline> . Like this <fo:inline font-family="monospace">{! some code }</fo:inline> .</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A verb definition can contain Left Noun and Right Noun, denoted by <fo:inline font-family="monospace">[</fo:inline> and <fo:inline font-family="monospace">]</fo:inline> . The Left Noun is a placeholder for the noun immediately preceding the verb definition. The Right Noun is a placeholder for the noun immediately following the verb definition.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A verb definition containing only Right Nouns forms a monadic verb. A verb definition containing a Left Noun forms a dyadic verb, even if there is no Right Noun. In that case you are forced to have a noun to the right of the verb definition and this noun is silently ignored.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is a verb definition of a monadic increment verb<fo:inline font-family="monospace"> {! 1 + ] } </fo:inline>. Example of use: <fo:inline font-family="monospace">{! 1 + ] } 2</fo:inline> .</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This is a verb definition of a dyadic addition verb <fo:inline font-family="monospace">{! [ + ] } </fo:inline>. Example of use: <fo:inline font-family="monospace">1 {! [ + ] } 2</fo:inline> .</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Left and Right nouns within brackets are placeholders for the noun arguments to the first verb definition enclosing the brackets. In this example the Left noun is one and the Right noun is two: <fo:inline font-family="monospace">1 {! ( [ + ] ) + 1 } 2</fo:inline> .</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There is no way to define adverbs and conjunctions in this version of JWithATwist.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e1190">A sample session :
<fo:inline font-family="monospace">
{ 1 }
 1
{ 1 + 1 }
 2
{ ( 1 - 1 ) + 1 }
 1
{ ( 1 - 1 ) {! [ + ] } 1 }
 1
{ { 1 - 1 } {! [ + ] } 1 }
 1
{ + / 1 }
 2
{ {! [ + ] } / 1 }
 2
{ + / |. + 1 }
 4
{ 2 + / . + 1 }
 6
{ 2 + / . + |- |- 1 }
 6
{ 2 + / . {! [ + ] } |- |- 1 }
 6
{ 2 + / . + |- {! |- ] } 1 }
 6
{ 2 + /- 3 }
 5
{ 5 {! ( [ + ] ) + [ + ] } 7 }
 24
{ |- + / |- |. + + / |. + |- 5 }
 -80</fo:inline></fo:block></fo:block><fo:block id="d0e1194"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">JWithATwist Use Cases</fo:marker><fo:block font-size="20.735999999999997pt">JWithATwist Use Cases</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">JWithATwist can be used as a calculator in a terminal window with the included JWithATwist program. JWithATwist can also be used from F#. You can use the JWithATwist verbs, adverbs and conjunctions directly from F#, with no interpreter in between. You can define J verbs and use them as F# functions. You can use JWithATwist definitions as lambda expressions or unnamed variables and functions.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">JWithATwist can easily be extended. If you implement a new verb, adverb or conjunction as an F# function it can be included in the interpreter with only some minutes of work. You can also easily extend JWithATwist with verbs you define from JWithATwist expressions.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The JWithATwist interpreter can be used separately. You can create your own language. The JWithATwist Mock Interpreter is a good starting point. If you want the basic APL/J syntax it is an easy way to create your own language.</fo:block><fo:block id="d0e1203"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The JWithATwist Terminal</fo:marker><fo:block font-size="17.28pt">The JWithATwist Terminal</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Install JWithATwist with the included Windows installation program. You will get a JWithATwist program in your Start menu. Run it and start writing JWithATwist expressions. Remember that all expressions are written within curly brackets. Also remember to put blanks between all language elements. If you press return without any input you will terminate the terminal session.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you cloned JWithATwist to your development environment you can start the terminal session by calling the Parser program.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e1210">Examples :
<fo:inline font-family="monospace">
{ 1 }
 1
{ 1 + 1 }
 2
{ {! 1 + ] } |i. 3 }
 1 2 3
</fo:inline></fo:block></fo:block><fo:block id="d0e1214"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Using JWithATwist From F#</fo:marker><fo:block font-size="17.28pt">Using JWithATwist From F#</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All JWithATwist verbs, adverbs and conjunctions can be used directly from F#. Usually the name is the same as the name of the language element preceded by J. JOpen, JBox, JAdd and JSubtract are some examples. Sometimes there is a monadic and a dyadic version of the language element. Then Monadic or Dyadic is appended to the name. JIotaMonadic, JIotaDyadic, JRankMonadic and JRankDyadic are some examples. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When you use the verbs, adverbs and conjunctions you need noun arguments.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"> A noun is a simple record structure containing type, shape and an F# array of values. You can see the type definitions at the top of the JWithATwist.Base module. You can easily create a noun from F# variables.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you want to create a noun from a JWithATwist expression you can use the JNounDefine helper function. It takes a string right argument with a JWithATwist expression and returns a noun.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you want to use a resulting noun in F# you have to use the record structure. There is no helper function to create any special F# representation from a noun.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can also create F# functions from JWithATwist expressions. There are two helper functions, JVerbMonadicDefine and JVerbDyadicDefine. They take a string right argument with a JWithATwist expression and return a monadic or dyadic verb. </fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Sometimes you want to create a verb directly in F# from other verbs. You can just create a function with one or two noun arguments and use these in the function definition.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can also partially execute verbs, adverbs and conjunctions in F#, and create new verbs, adverbs or conjunctions as a result.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you define the JWithATwist verbs at the module level, they will only be interpreted once, when the module is loaded. After definition JWithATwist verbs are a composition of compiled code. There is no  interpretation when the resulting F# function is executed.</fo:block><fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" id="d0e1235">Examples :
<fo:inline font-family="monospace">
    JPrint (JIotaMonadic (JNounDefine @"{ 3 }"))
 0 1 2
    let Increment = JVerbMonadicDefine @"{! 1 + ] }"
    JPrint (Increment (JIotaMonadic (JNounDefine @"{ 3 }")))
 1 2 3	
    let Add = JVerbDyadicDefine @"{! [ + ] }" 
    JPrint (Add (JNounDefine @"{ 1 }") (JNounDefine @"{ 1 }"))
 2
    let Increment = Add (JNounDefine @"{ 1 }")
    JPrint (Increment (JIotaMonadic (JNounDefine @"{ 3 }")))
 1 2 3	
    let aNoun = JNounDefine @"{ 1 }"
    let f aNoun =
        match aNoun.JType,aNoun.JShape,aNoun.JValue with
        |aType,aShape,JTypeIntegerArray aValue -&gt;
            printfn "%i" aValue.[0]  
        |_-&gt;
            raise JExceptionSystemError
    f aNoun
1
</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The printout in the examples is what is written to standard output as a result of the preceding code sample.</fo:block></fo:block><fo:block id="d0e1241"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Extending JWithATwist</fo:marker><fo:block font-size="17.28pt">Extending JWithATwist</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To extend JWithATwist with new verbs, adverbs and conjunctions you first have to create the F# function. If you want you can use JWithATwist code in the definition. You can also use parsed JWithATwist expressions.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The extension is done in the ParserInterface module. You copy and modify the code for some similar language element. You just have to change some lines of code. Then you have to insert the new parsing code in the parser, by modifying parseVerbAdverbConjunction. All is very easy.
	</fo:block></fo:block><fo:block id="d0e1248"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="sans-serif,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Using the JWithATwist Mock Interpreter to Create Your Own Language</fo:marker><fo:block font-size="17.28pt">Using the JWithATwist Mock Interpreter to Create Your Own Language</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you want to create your own language and use the JWithATwist interpreter, you just copy the ParserMockDefinitions, ParserMockInterface and ParserMock files into your F# project. If you want you can copy the test code in JWithATwist.Test.ParserMock. Run the Parser program in ParserMock and try the JWithATwist Mock Interpreter. Then you can change it by modifying the definitions in ParserMockDefinitions and the code in ParserMockInterface. You normally don't have to change the interpreter and the parse code in ParserMock. It is easy. Creating the language elements can be difficult, of course.</fo:block></fo:block></fo:block><fo:block id="d0e1253"><fo:block><fo:block><fo:block margin-left="0pt" font-size="24.8832pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold"><fo:block keep-with-next.within-column="always" space-before.optimum="10pt" space-before.minimum="10pt * 0.8" space-before.maximum="10pt * 1.2" hyphenate="false" text-align="center" start-indent="0pt" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2">Glossary</fo:block></fo:block></fo:block></fo:block></fo:block><fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" provisional-distance-between-starts="2in" provisional-label-separation="0.25in"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.adverb"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1257">Adverb</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A function with a verb argument and one or two noun arguments, returning a noun.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.agreement"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1263">Agreement</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>How JWithATwist allows operations between arguments of different shape.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.boxed"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1269">Boxed</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A noun of data type boxed contains other nouns. It is an n-dimensional array of n-dimensional arrays.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.cell"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1275">Cell</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>The smallest unit in an n-dimensional array. A simple data type or another noun.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.conjunction"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1281">Conjunction</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A function with two verb arguments and one or two noun arguments, returning a noun.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.dyadic"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1287">Dyadic</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A verb, adverb or conjunction with two noun arguments.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.fillvalue"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1293">Fill value</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Fill values can be used when a noun is resized. The integer fill value is 0, the float fill value is 0.0, the boolean fill value is false, the unicode fill value is blank and the boxed array fill value is a scalar boxed array containing an empty integer vector.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.kcell"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1299">K-cell</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>The noun is seen as a structure of k-cells. The scalar is a 0-cell, the vector a 1-cell, the table a 2-cell and so on for higher dimensions.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.monadic"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1305">Monadic</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A verb, adverb or conjunction with one noun argument.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.noun"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1311">Noun</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>An n-dimensional array of values where the values are simple data types or other n-dimensional arrays.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.noundefinition"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1317">Noun definition</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A noun definition is written between curly brackets. It contains a noun or an expression returning a noun.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.rank"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1323">Rank</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>The rank of a noun is the number of dimensions of the array it contains. The rank of a verb is the size of k-cell or k-cells of the argument or arguments that the actual underlying verb operation is performed on.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.scalar"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1329">Scalar</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A noun with zero dimensions contains only one value. It is called a scalar. An operation on 0-cells  is called a scalar operation.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.verb"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1335">Verb</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A function with one or two noun arguments returning a noun.</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="glossary.verbdefinition"><fo:list-item-label end-indent="label-end()"><fo:block><fo:inline id="d0e1341">Verb definition</fo:inline></fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>A verb definition is written between curly brackets with the opening bracket followed by <fo:inline font-family="monospace">!</fo:inline> . It an expression returning a verb.</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:flow></fo:page-sequence></fo:root>